//Variablen

//Würfel Input
int Würfel1;
int Würfel2;
int Würfel3;
int Würfel4;
int Würfel5;

//Coverter für Array
int Z1;
int Z2;
int Z3;
int Z4;
int Z5;

int Points1er;	boolean 1er;
int Points2er;	boolean 2er;
int Points3er;	boolean 3er;
int Points4er;	boolean 4er;
int Points5er;	boolean 5er;
int Points6er;	boolean 6er;

int Points3erPash;	boolean 3erPash;
int Points4erPash;	boolean 4erPash;
int PointsChance;
boolean Kniffel;

1//-----------------------------------------------------------------------------------------------------------------
//Array Sortiert
int[] Sorted;
Sorted = new int[5]
//-----------------------------------------------------------------------------------------------------------------	


//Check-em + Punkte

//Check-Straßeup
if 
{
	for(int CountForward =0; CountForward < Sorted.lenght; CountForward++)
		{
		if(CountForward == 4 { KleineStraße= true;}
		if(CountForward == 5 {  GroßeStraße= true;}
		}
}


//Check-Straßedown
if 
{
	for(int CountBackward =5; CountBackward > Sorted.lenght; CountBackward--)
		{
		if(CountBackward == 4 { KleineStraße= true;}
		if(CountBackward == 5 {  GroßeStraße= true;}
		}

//Check-1er
if (Sorted[0] == 1)
	{
	1er = true;
	for (int Count = 0; Count < Sorted.length; Sorted[Count]=1; Count++)	
	Points1er =Count*1;
	}

//Check-2er
if (Sorted[0] == 2)
	{
	2er = true;
	for (int Count = 0; Count < Sorted.length; Sorted[Count]=2; Count++)	
	Points1er =Count*2;	
	}

//Check-3er
if (Sorted[0] == 3)
	{
	3er = true;
	for (int Count = 0; Count < Sorted.length; Sorted[Count]=2; Count++)	
	Points1er =Count*3;		
	}

//Check-4er
if (Sorted[0] == 4)
	{
	4er = true;
	for (int Count = 0; Count < Sorted.length; Sorted[Count]=4; Count++)	
	Points1er =Count*4;
	}

//Check-5er
if (Sorted[0] == 5)
	{
	5er = true;
	for (int Count = 0; Count < Sorted.length; Sorted[Count]=5; Count++)	
	Points1er =Count*5;
	}

//Check-6er
if (Sorted[0] == 6)
	{
	6er = true;
	for (int Count = 0; Count < Sorted.length; Sorted[Count]=6; Count++)	
	Points1er =Count*6;
	}

//3erPash
if (Sorted[0] == Sorted[1] == Sorted[2])
	{
	3erPash = true;
	Points4erPash = (Sorted[0] + Sorted[1] + Sorted[2] + Sorted[3] + Sorted[4] + Sorted[5]);		
	}

//4erPash
if (Sorted[0] == Sorted[1] == Sorted[2] == Sorted[3])
	{
	4erPash = true;
	Points4erPash = (Sorted[0] + Sorted[1] + Sorted[2] + Sorted[3] + Sorted[4] + Sorted[5]); 	
	}

//Kniffel
if (Sorted[0] == Sorted[1] == Sorted[2] == Sorted[3] == Sorted[4])
	{
	Kniffel = true;	
	}

//FullHouse
if (Sorted[0] == Sorted[1] == Sorted[2] == Sorted[3] && Sorted[3] =! Sorted[4] && Sorted[4] == Sorted[5])
	{
	FullHouse = true;	
	
	
	}

//PointsChance
int PointsChance = 0;
PointsChance =(Sorted[0] + Sorted[1] + Sorted[2] + Sorted[3] + Sorted[4] + Sorted[5]);

//-----------------------------------------------------------------------------------------------------------------